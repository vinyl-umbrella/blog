---
import Layout from '../layouts/General.astro';
import Toc from '../components/Toc.astro';

import { formatDate } from '../utils/util';
import type { CollectionEntry } from 'astro:content';
import type { MarkdownHeading } from 'astro';

interface Props {
  props: CollectionEntry<'blog'>['data'];
  headings: MarkdownHeading[];
  needsMermaid: boolean;
}

const { title, description, pubDate, updatedDate, tags } = Astro.props.props;
let { headings } = Astro.props;
const { needsMermaid } = Astro.props;
// add page title to headings
headings.unshift({ depth: 1, text: title, slug: title });
---

<Layout title={title} description={description}>
  <div class='main'>
    <Toc headings={headings} />
    <article>
      <div class='prose'>
        <div class='title'>
          <div class='sub'>
            {formatDate(pubDate)}
            {
              updatedDate && (
                <span class='last-updated-on'>
                  (↻{formatDate(updatedDate)}更新)
                </span>
              )
            }
            {
              tags.map((tag) => (
                <a href={`/tags/${tag}/`} class='tag'>
                  #{tag}
                </a>
              ))
            }
          </div>
          <h1 id={title}>{title}</h1>
          <hr />
        </div>
        <div class='article'>
          <slot />
        </div>
      </div>
    </article>
  </div>
</Layout>

<style>
  .main {
    display: flex;
    gap: 1em;
    & > article {
      @media (max-width: 768px) {
        width: 100%;
      }

      @media (min-width: 768px) {
        width: calc(100% - 12em);
      }
    }
  }

  .prose {
    max-width: calc(100% - 2em);
    overflow-x: hidden;
    margin: auto;
    padding: 1em;

    .title {
      margin-bottom: 1em;
      line-height: 1;
      color: var(--text-bright);

      .sub {
        margin-bottom: 0.5em;
        color: rgba(200, 206, 217, 0.7);

        .last-updated-on {
          font-style: italic;
        }

        a {
          margin-left: 0.5em;
          text-decoration: none;
          color: rgba(200, 206, 217, 0.7);

          &:hover {
            color: var(--accent);
          }
        }
      }
    }

    .article {
      h1,
      h2,
      h3,
      h4 {
        margin-top: 2em;
        margin-bottom: 1em;
        background: linear-gradient(transparent 85%, var(--color-gray-700) 85%);
      }

      p {
        padding: 3px 2px;
        margin: 0.5em 0;
      }

      ul,
      ol {
        padding-left: 1.7em;

        li {
          margin: 0.4em 0;
        }
      }
    }

    img {
      display: block;
      height: auto;
      min-width: 80%;
      margin: 2em auto;
    }

    .mermaid-container {
      display: flex;
      justify-content: center;
      margin: 1em auto;

      svg {
        p {
          all: unset;
        }
      }
    }
  }
</style>

<script is:inline>
  function attachListenerToCopyButton() {
    async function copyCode(block, button) {
      const code = block.querySelector('code');
      const text = code?.textContent;

      await navigator.clipboard.writeText(text ?? '');

      button.innerText = 'Copied';
      setTimeout(() => {
        button.innerText = 'Copy';
      }, 700);
    }

    let codeBlocks = Array.from(document.querySelectorAll('pre'));
    for (let codeBlock of codeBlocks) {
      let copyButton = codeBlock.previousElementSibling.querySelector(
        '.remark-code-copy-button',
      );

      copyButton.addEventListener('click', async () => {
        await copyCode(codeBlock, copyButton);
      });
    }
  }
  attachListenerToCopyButton();
</script>

{needsMermaid && <script is:inline type='module' src='/js/mermaid.js' />}
